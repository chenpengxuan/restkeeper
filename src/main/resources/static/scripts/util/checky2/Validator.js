/** * @descr 表单验证插件 */define(function(require, exports, module) {vn=require('vn');	$=require('jquery');vn.checky2 = vn.checky2 || {};/** * 表单验证组件 * @name baidu.form.Validator * @class * @grammar new baidu.form.Validator(form, fieldRule, options) * @param {HTMLElement|String} form 一个表单对象的引用或是该id的字符串标识 * @param {Object} fieldRule 对验证规则的配置，一个验证域需要的配置包括验证域名称，验证规则，提示信息(可选，需要Validator$message支持)，提示信息存放容器(可选，需要Validator$message支持)，验证触发事件(可选)，一个完整的配置大致如：fieldName: {rule: {required: {param: true, message: {success: 'success msg', failure: 'failure msg'}}, maxlength: {param: 50, message: 'failure msg'}, email: true}, messageContainer: 'myMsgElement', eventName: 'keyup,blur'} * @param {Object} options 参数描述 * @config {String} validateEvent 描述全局的各个验证域的触发验证事件，如'blur,click'，默认是blur * @config {Boolean} validateOnSubmit 描述是否当提交表单时做验证，默认是true. * @config {Function} onvalidatefield 验证单个验证域结束时的触发事件，function(event){}，event.field返回当次验证域的名称，event.resultList返回验证失败的项目数组(当验证成功时该数组长度为0)，各个项是json数据，格式如：{type: 类型, field: 被验证域名称}. * @config {Function} onvalidate 验证全部验证域结束时的触发事件，function(event){}，event.resultList返回验证失败的项目数组(当验证成功时该数组长度为0)，各个项是json数据，格式如：{type: 类型, field: 被验证域名称}. * @return {baidu.form.Validator} validator对象 */vn.checky2.Validator = vn.lang.createClass(function (form, fieldRule, options) {  var me = this,    fn = vn.checky2.Validator,    count = fn._addons.length,    i = 0,    eventNameList;  me._form = $(form).get(0);  me._fieldRule = fieldRule;  me._validRule = new vn.checky2.ValidRule();  vn.object.extend(me, options);  eventNameList = me.validateEvent.split(',');  //添加事件  function addEvent(eventName, key) {    var entry = {      element: key ? me._form.elements[key] : me._form,      eventName: eventName,      handler: vn.fn.bind('_onEventHandler', me, key)    };    $(entry.element).bind(entry.eventName, entry.handler).bind('focus', function (e) {      me.dispatchEvent('onfieldfocus', {        field: key,        event: e      });    });    me.addEventListener('ondispose', function () {      $(entry.element).unbind(entry.eventName, entry.handler);    });  }  $.each(me._fieldRule, function (key, value) {    $.each(vn.lang.isString(value.eventName) ? value.eventName.split(',') : eventNameList, function (i, item) {      addEvent(item, key);    });  });  me.validateOnSubmit && addEvent('submit');  //插件机制  for (; i < count; i++) {    fn._addons[i](me);  }}).extend({  validateEvent: 'blur',  validateOnSubmit: true,  submitOnSucceed: true,  _onEventHandler: function (key, evt) {    var me = this;    if (!key) { //如果是submit      evt.preventDefault();      me.validate(function (val, list) {        val && me.submitOnSucceed && me._form.submit();      });      return;    }    me.validateField(key);  },  /**   * 添加一条规则到当前的验证器中   * @param {String} name 规则名称   * @param {Functioin|RegExp} handler 验证函数或是验证正则表达式，当是函数时需要在实现在显示返回一个boolean值   * @param {Object|String} message 验证结果的提示信息，如：{success: 'success msg', failure: 'failure msg'}，当只有传入字符串时表示只有failure的提示   */  addRule: function (name, handler, message) {    var me = this;    me._validRule.addRule(name, handler);    me.dispatchEvent('onaddrule', {      name: name,      handler: handler,      message: message    });  },  /**   * 对所有表单进行验证，并把验证结果返回在callback函数中   * @param {Function} callback 验证结束后的回调函数，第一参数表示验证结果，第二参数表示验证的失败项数组，各个项的json格式如：{type: 类型, field: 被验证域名称}   */  validate: function (callback) {    var me = this,      keyList = vn.object.keys(me._fieldRule),      resultList = [],      count = 0;    $.each(keyList, function (index, item) {      me.validateField(item, function (val, list) {        resultList = resultList.concat(list);        if (count++ >= keyList.length - 1) {          vn.lang.isFunction(callback) && callback(resultList.length <= 0, resultList);          me.dispatchEvent('onvalidate', {            resultList: resultList          });        }      });    });  },  /**   * 对单个验证域进行验证，结果返回在callback回调函数中   * @param {String} name 单个验证域的名称   * @param {Function} callback 验证结束后的回调函数，第一参数表示验证结果，第二参数表示验证的失败项数组，各个项的json格式如：{type: 类型, field: 被验证域名称}   */  validateField: function (name, callback) {    var me = this,      entry, rules = me._fieldRule[name].rule,      //一定需要有rule      value = me._form.elements[name].value,      keyList = vn.array.filter(vn.object.keys(rules), function (item) { //过滤一些不需要的验证        entry = rules[item];        return (value || item === 'required' || item === 'nullpwd'|| item === 'exp') && (entry.hasOwnProperty('param') ? entry.param : entry) !== false;      }),      resultList = [],      count = 0;    function finish() { //当所有都验证完了以后      if (count++ >= keyList.length - 1) {        me.dispatchEvent('validatefield', {          field: name,          resultList: resultList        });        vn.lang.isFunction(callback) && callback(resultList.length <= 0, resultList);      }    }    keyList.length == 0 && finish(); //当keyList是空数组的时候表示没有需要验证的，则先提交    $.each(keyList, function (index, item) {      entry = rules[item];      me._validRule.match(item, name, value, function (val) {        !val && resultList.push({          type: item,          field: name,          result: val        });        finish();      }, {        param: entry.hasOwnProperty('param') ? entry.param : entry      });    });  },  /**   * 析构函数   */  dispose: function () {    var me = this;    me.dispatchEvent('ondispose');    vn.lang.Class.prototype.dispose.call(me);  }});//构造函数插件器vn.checky2.Validator._addons = [];vn.checky2.Validator.register = function (fn) {  typeof fn == 'function' && vn.checky2.Validator._addons.push(fn);}vn.checky2.Validator.register(function (me) {  if (!me.showMessage) {    return;  }  me._defaultId = vn.lang.uuid();  me._defaultMessage = {    required: 'This field is required.',    remote: 'Please fix this field.',    email: 'Please enter a valid email address.',    number: 'Please enter a valid number.',    maxlength: 'Please enter no more than #{param} characters.',    minlength: 'Please enter at least #{param} characters.',    rangelength: 'Please enter a value between #{param[0]} and #{param[1]} characters long.',    equal: 'Please enter the same value again.',    telephone: 'Please enter a valid telephone number.'  };  me.addEventListener('onaddrule', function (evt) {    me._defaultMessage[evt.name] = evt.message;  });  me.addEventListener('onfieldfocus', function (evt) {    var element = me._getContentElement(evt.field);    if (!me._fieldRule[evt.field] ||!me._fieldRule[evt.field].focus) {      return;    }    $(element).attr('class', '').addClass(['vn-checky2-', me.uiType, '-info'].join('')).    addClass(['vn-checky2-', me.uiType, '-', evt.field, '-info'].join('')).html(me._fieldRule[evt.field].focus);  });  me.addEventListener('onvalidatefield', function (evt) {    var element = me._getContentElement(evt.field),      val = evt.resultList.length <= 0,      key = val ? vn.object.keys(me._fieldRule[evt.field].rule).pop() : evt.resultList[0].type,      fieldRule = me._fieldRule[evt.field].rule[key],      msg = fieldRule.message;    !msg && (msg = me._defaultMessage[key]);    msg = val ? (msg.success || '') : (msg.failure || msg);    $(element).addClass(['vn-checky2-', me.uiType, '-', (val ? 'success' : 'failure')].join('')).    addClass(['vn-checky2-', me.uiType, '-', evt.field, '-', (val ? 'success' : 'failure')].join('')).    removeClass(['vn-checky2-', me.uiType, '-', (val ? 'failure' : 'success')].join('')).    removeClass(['vn-checky2-', me.uiType, '-', evt.field, '-', (val ? 'failure' : 'success')].join('')).    removeClass(['vn-checky2-', me.uiType, '-info'].join('')).    removeClass(['vn-checky2-', me.uiType, '-', evt.field, '-info'].join(''));    element.innerHTML = vn.string.format(msg, { //这里扩展性不是很好啊      param: fieldRule.param,      'param[0]': $.isArray(fieldRule.param) ? fieldRule.param[0] : '',      'param[1]': $.isArray(fieldRule.param) ? fieldRule.param[1] : ''    });  });});vn.object.extend(vn.checky2.Validator.prototype, {  showMessage: true,  uiType: 'validator',  tplDOM: '<span id="#{id}" class="#{class}"></span>',  /**   * 取得一个存放信息提示的容器，如果该容器不存在则创建一个容器   * @param {String} field 验证域的名称   * @return {HTMLElement} 返回一个DOM容器对象   * @private   */  _getContentElement: function (field) {    var me = this,      rsid = [me._defaultId, '_', me.uiType, '_', field].join(''),      element = $(['#', rsid].join('')).get(0),      container;      if(!field){    	  return;      }      //修正me._fieldRule[field].messageContainer不存在的情况      container = me._fieldRule[field].messageContainer ? $(['#', me._fieldRule[field].messageContainer].join('')) : me._fieldRule[field].messageContainer;    if (!element) {      container ? $(container).empty().append(vn.string.format(me.tplDOM, {        id: rsid,        'class': 'vn-checky2-' + me.uiType      })) : $(me._form.elements[field]).after(vn.string.format(me.tplDOM, {        id: rsid,        'class': 'vn-checky2-' + me.uiType      }));      element = $(['#', rsid].join('')).get(0);    }    return element;  },  /**   * 取得一个验证域对应的信息提示容器，如果该容器不存在返回空值   * @param {String} field 验证域的name   * @return {HTMLElement} 存放信息提示的容器   */  getMessageContainer: function (field) {    return $(['#', this._defaultId + '_' + field].join(''));  }});vn.checky2.Validator.register(function (me) {  if (!me.showIcon) {    return;  }  me._defaultId = vn.lang.uuid();  me.addEventListener('onvalidatefield', function (evt) {    var element = me._getIconElement(evt.field),      val = evt.resultList.length <= 0;    $(element).addClass(['vn-checky2-', me.iconType, '-', (val ? 'success' : 'failure')].join('')).    addClass(['vn-checky2-', me.iconType, '-', evt.field, '-', (val ? 'success' : 'failure')].join('')).    removeClass(['vn-checky2-', me.iconType, '-', (val ? 'failure' : 'success')].join('')).    removeClass(['vn-checky2-', me.iconType, '-', evt.field, '-', (val ? 'failure' : 'success')].join(''));    return element;  });});vn.object.extend(vn.checky2.Validator.prototype, {  showIcon: true,  iconType: 'validator-icon',  iconTpl: '<div id="#{id}" class="#{class}"></div>',  /**   * 取得一个存放提示Icon的容器，如果该容器不存在则创建一个容器   * @param {String} field 验证域的名称   * @return {HTMLElement} 返回一个DOM容器对象   * @private   */  _getIconElement: function (field) {    var me = this,    rsid = [me._defaultId, '_', me.iconType, '_', field].join(''), element = $(['#', rsid].join('')).get(0), container = me._fieldRule[field].iconContainer ? $(['#', me._fieldRule[field].iconContainer].join('')) : me._fieldRule[field].iconContainer;        return me._fieldRule[field].iconContainer ? $(['#', me._fieldRule[field].iconContainer].join('')) : element?$(element):$(vn.string.format(me.iconTpl, {      id: rsid,      'class': 'vn-checky2-' + me.iconType    })).insertAfter($(me._form.elements[field]));  }});/*rule*//** * @descr 表单验证插件 */vn.checky2.ValidRule = vn.checky2.ValidRule || vn.lang.createClass(function () {        var me = this;        me._rules = {            required : function (val) { //必填 true:表示有值, false:表示空或无值                return !!(val && !/^(?:\s|\u3000)+$/.test(val));            },            nullpwd : function (val) { //必填 true:表示有值, false:表示空或无值            	return !!(val || /(?:\s|\u3000)+$/.test(val));            },                        remote : function (xhr, val) {                return !!(val && val == true);            },            email : /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,            number : /^(?:[1-9]\d+|\d)(?:\.\d+)?$/,            maxlength : function (val, opt) {                return val.length <= opt;            },            minlength : function (val, opt) {                return val.length >= opt;            },            rangelength : function (val, opt) {                return val.length >= opt[0] && val.length <= opt[1];            },            equal : function (val, opt) {                return val === (vn.lang.isFunction(opt) ? opt() : opt);            },            telephone : /^(0[0-9]{2,3}\-){1}([2-9][0-9]{6,7})+(\-[0-9]{1,4})?$|(400|800)([0-9\\-]{7,10})|(^(13[0-9]|14[0-9]|15[0-9]|17[0-9]|18[0-9])\d{8}$)/,            maxlengthGB : function (val, opt) {                return val.replace(/[\u4E00-\u9FA5\u3000，。；！？]/g, "**").length <= opt;            },            minlengthGB : function (val, opt) {                return val.replace(/[\u4E00-\u9FA5\u3000，。；！？]/g, "**").length >= opt;            },            realname : /^[A-Za-z0-9\u4e00-\u9fa5]+$/,            username : /^[A-Za-z0-9\u4e00-\u9fa5\-_]+$/,            idcard : /^\d{14}(\d{1}|\d{4}|(\d{3}[xX]))$/,            zipcode : /^\d\d{5}$/,            intnumber : /^[1-9]\d*$/,            nonumber : /^\D+$/,            password :/^[\x00-\xff]+$/,            maxval : function (val, opt) {                        return parseFloat(val) <= opt;            },            minval : function (val, opt) {                return parseFloat(val)>= opt;            },            url : /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/i        };    }).extend({        /**         * 根据规则名称取得对应的规则，参数可选，没有参数则返回所有规则的对象         * @param {String} name 已知的规则名称         * @private         */        _getRule : function (name) {            var me = this;            return vn.lang.isString(name) ? me._rules[name] : me._rules;        },                /**         * 用一个验证方法对一个已经存在的值进行验证，并将结果返回到回调中。说明：如果是一个remote验证，则是一个ajax验证，请让服务器返回true或是false来表示验证结果         * @param {String} name 验证方法的名称，如：required,email等         * @param {String} field 验证域的名称         * @param {String} val 需要被验证的字符串值，如果是remote该参数可以忽视         * @param {Function} callback 验证结束的回调，第一参数为验证结果         * @param {Object} options 表示验证需要的参数，如当验证类型是maxlength时，需要options是{param:10}         */        match : function (name, field, val, callback, options) {            var me = this,            rule = me._getRule(name),            param = options && options.param,            requestData = {};            if ('remote' == name.toLowerCase()) {                vn.lang.isString(param) && (param = {                        url : param                    });                param = vn.object.extend({}, param);                param.data && vn.lang.isFunction(param.data)                 && (param.data = param.data(val));                param.onsuccess = param.onfailure = function (responseText, status, xhr) {                    if (responseText.status === 'SUCCESS') {                        responseText = true;                    } else if (responseText.status === 'ERROR') {                        responseText = false;                    }                    callback(rule(xhr, responseText));                }                //data只接受字符串,函数                if (vn.lang.isFunction(param.data)) {                    requestData = param.data();                } else if (vn.lang.isString(param.data)) {                    requestData = param.data;                } else {                    requestData[field] = val;                }                $.ajax({                        url:param.url,                        data:requestData,                        success:param.onsuccess                })                //(param.method === 'post' ? $.post : $.get)(param.url, requestData, param.onsuccess);            } else {                callback(vn.lang.isFunction(rule) ? rule(val, param) : rule.test(val));            }        },                /**         * 增加一条验证规则         * @param {String} name 验证规则的名称         * @param {Function|RegExp} handler 执行验证的函数或是正则表达式，如果是函数，需要返回一个boolean         */        addRule : function (name, handler) {            this._rules[name] = handler;        }    });/*addRule*/// 暴露对应接口  module.exports = vn.checky2;});